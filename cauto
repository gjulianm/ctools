#!/bin/bash

toupper() {
	echo $name | tr '[:lower:]' '[:upper:]'
}

create_header() {
	if [ -z $1 ]; then
		echo "We need a file name."
		return
	fi

	name=$1
	guard=$(toupper $name)_H
	cat << EOF > $name.h
#ifdef $guard
#define $guard

#endif /* $guard */
EOF
}

generate_file() {
	if [ ! -d src ] || [ ! -d includes ]; then
		echo "Make sure you're in the root directory for the project."
		return
	fi

	if [ -z $1 ]; then
		echo "We need a file name."
		return
	fi

	name=$1
	guard=$(toupper $name)_H

	funcs_h="#ifndef $guard\n#define $guard\n\n"
	funcs_c="#include \"$name.h\"\n\n"

	echo "Write the functions (Ctrl-D to end):"

	while read func; do
		funcs_h=$funcs_h$func";\n"
		funcs_c=$funcs_c$func" {\n\n}\n\n"
	done

	funcs_h=$funcs_h"#endif\n" # Bash expands /* and idk wtf it does that.

	echo -e $funcs_c > src/$name.c
	echo -e $funcs_h > includes/$name.h
	echo
	echo "Created src/$name.c and includes/$name.h"
}

create_lib() {

	if [ -z $1 ]; then
		echo "We need a library name."
		return
	fi

	mkdir srclib/lib$1
}

create_headersrc_cpp() {
	if [ -z $1 ]; then
		echo "We need a name!"
		return
	fi

	name="$1"

	guard=$(toupper $name)_HPP

	cat << EOF > includes/$name.hpp
#ifndef $guard
#define $guard

#endif /* $guard */
EOF
	echo "Created includes/$name.hpp"

	echo "#include \"$name.hpp\"" > src/$name.cpp
	echo "Created src/$name.cpp"
}

case $1 in
	"header")
		create_header $2
		;;
	"file")
		generate_file $2
		;;
	"newprac")
		create_prac_dir $2
		;;
	"lib")
		create_lib $2
		;;
	"hs++")
		create_headersrc_cpp $2
		;;
	*)
		cat << EOF
Available commands.
	-header <name>: Create a header file.
	-hs++ <name>: Create a header file (C++).
	-file <name>: create file and header.
	-newprac <name>: create prac dir.
	-lib <name>: create a new library in the directory
EOF
		;;
esac
