#!/bin/bash

proj_folders="src doc includes tests"
scr_dir="$( dirname "${BASH_SOURCE[0]}" )"
scr_dir="$( dirname "${BASH_SOURCE[0]}" )"
libdir=$scr_dir/libs

function init()
{
	projname=$1
	[ -z $projname ] && (echo "Project name not present"; exit 1)

	mkdir $projname
	cd $projname
	mkdir $proj_folders
	echo "Created folder structure for project $projname"

	cp "$scr_dir/makefiles/Makefile" ./
	sed -i .sed "s/__project_name__/$projname/g" Makefile
	echo "Created Makefile"

	cat << EOF >> src/$projname.c
#include <stdio.h>
#include <stdlib.h>

int main(int argc, const char** argv)
{
	printf("Hello World!\n");
	return 0;
}
EOF
	echo "Generated initial file."

	catest init
	echo "Initialized test structure."

	git init
	echo "Created git repo."

	rm *.sed
}

function makefile_plugin_add()
{
	plugin_name=$1
	[ -z $plugin_name ] && (echo "Plugin name not present"; exit 1)

	plugin_fname="Makefile-$plugin_name.mk"
	plugin_path="$scr_dir/makefiles/$plugin_fname"

	[ -f "$plugin_path" ] || (echo "Makefile plugin $plugin_fname not present in $plugin_path"; exit 1)

	sed -i .sed "s/### Makefile plugins/### Makefile plugins\ninclude $plugin_fname/g" Makefile
}

save_lib() {
	lib=$1
	lname=lib$lib

	if [ -z $lib ] || [ ! -d srclib/$lname ]; then
		echo "$lib library not found."
		return
	fi

	libfiles=$( ls srclib/$lname )

	if [ ! -d "$libdir/$lname" ]; then
		echo "init $lname"
		cwd=$(pwd)
		mkdir "$libdir/$lname"
		cd "$libdir/$lname"
		catest init
		cd "$cwd"
	fi

	mkdir -p "$libdir"/$lname/src
	mkdir -p "$libdir"/$lname/includes
	mkdir -p "$libdir"/$lname/tests

	cp -v srclib/$lname/* "$libdir/$lname/src"

	if [ -d includes/$lib ]; then
		cp -v includes/$lib/* "$libdir/$lname/includes" 
	fi

	headers=$(echo $libfiles | sed -E 's/([a-zA-Z_]*)\.c/includes\/\1\.h/g')
	cp -v $headers "$libdir/$lname/includes"

	ltestdir="$libdir/$lname/tests"
	tests=$(echo $libfiles | sed -E 's/([a-zA-Z_]*)\.c/tests\/test_\1\.c/g')

	for test in $tests; do
		if [ -f "$libdir"/$lname/$test ]; then
			echo "merging $test"
			catest mergetest "$libdir/$lname/$test" $test
		else
			cp -v "$test" "$libdir/$lname/$test"
		fi
	done

	cwd=$(pwd)
	cd "$libdir"/$lname
	catest regenerate
	cd "$cwd"

	echo "$lname saved. Check the ctools repo status for conflicts."

}

copy_tests() {
	lib=$1
	lname=lib$lib
	tocopy="$libdir"/$lname
	echo "Copying $lib tests..."

	tests=$(ls $tocopy/tests)

	for test in $tests; do
		if [ -f tests/$test ]; then
			echo "merging $test"
			catest mergetest tests/$test $tocopy/tests/$test
		else
			cp -v $tocopy/tests/$test tests/$test
		fi
	done

	catest regenerate
}

copy_lib() {
	lib=$1
	lname=lib$lib
	tocopy="$libdir"/$lname

	if [ -z "$lib" ] || [ ! -d "$tocopy" ]; then
		echo "$lib library not found."
		return
	fi

	mkdir -p includes/$lib
	mkdir -p srclib/$lname

	cp -v -r "$tocopy/src/"* srclib/$lname/
	cp -v -r "$tocopy/includes/"* includes/$lib/

	echo "Copy tests?"
	select yn in "Yes" "No"; do
    	case $yn in
    	    Yes ) copy_tests $lib ; break;;
    	    No ) return;;
    	esac
	done
}

help() {
	cat << EOF
Available commands:
	- copyback <libname>
		Save a library in the directory.
	- install <libname>
		Install a library in the directory.
	- init <projname>
		Create a new project with usual structure.
	- mk-plugin <plugin-name>
		Install the given Makefile plugin.
EOF
}

args=${@:2}

case "$1" in
	"copyback") save_lib $args ;;
	"install") copy_lib $args ;;
	"init") init $args ;;
	"mk-plugin") makefile_plugin_add $args ;;
	*) echo "Unrecognized command."
		help ;;
esac
